#[derive(Clone, PartialEq, Debug)]
pub struct InstanceMetadata {
    pub version: String,
    pub instance_roles: Vec<InstanceRoleMetadata>,
    pub databases: Vec<DatabaseSchemaMetadata>,
    pub last_sync: i64,
}

#[derive(Clone, PartialEq, Debug)]
pub struct InstanceRoleMetadata {
    // The role name. It's unique within the instance.
    pub name: String,
    // The grant display string on the instance. It's generated by database engine.
    pub grant: String,
}

#[derive(Clone, PartialEq, Debug)]
pub struct DatabaseSchemaMetadata {
    // The name is the name of the database.
    pub name: String,
    // The schemas is the list of schemas in a database.
    pub schemas: Vec<SchemaMetadata>,
    // The character_set is the character set of a database.
    pub character_set: String,
    // The collation is the collation of a database.
    pub collation: String,
    // The extensions is the list of extensions in a database.
    pub extensions: Vec<ExtensionMetadata>,
    // The database belongs to a datashare.
    pub datashare: bool,
    // The service name of the database. It's the Oracle specific concept.
    pub service_name: String,
    // The database owner. It's used or pg.
    pub owner: String,
}

#[derive(Clone, PartialEq, Debug)]
pub struct ExtensionMetadata {
    // The name is the name of an extension.
    pub name: String,
    // The schema is the extension that is installed to. But the extension usage is not limited to the schema.
    pub schema: String,
    // The version is the version of an extension.
    pub version: String,
    // The description is the description of an extension.
    pub description: String,
}

#[derive(Clone, PartialEq, Debug)]
pub struct SchemaMetadata {
    // The name is the schema name.
    // It is an empty string for databases without such concept such as MySQL.
    pub name: String,
    // The tables is the list of tables in a schema.
    pub tables: Vec<TableMetadata>,
    // The external_tables is the list of external tables in a schema.
    pub external_tables: Vec<ExternalTableMetadata>,
    // The views is the list of views in a schema.
    pub views: Vec<ViewMetadata>,
    // The functions is the list of functions in a schema.
    pub functions: Vec<FunctionMetadata>,
    // The procedures is the list of procedures in a schema.
    pub procedures: Vec<ProcedureMetadata>,
    // The materialized_views is the list of materialized views in a schema.
    pub materialized_views: Vec<MaterializedViewMetadata>,

    pub owner: String,
    pub comment: String,
}

#[derive(Clone, PartialEq, Debug)]
pub struct ExternalTableMetadata {
    // The name is the name of a external table.
    pub name: String,
    // The external_server_name is the name of the external server.
    pub external_server_name: String,
    // The external_database_name is the name of the external database.
    pub external_database_name: String,
    // The columns is the ordered list of columns in a foreign table.
    pub columns: Vec<ColumnMetadata>,
}

#[derive(Clone, PartialEq, Debug)]
pub struct ViewMetadata {
    // The name is the name of a view.
    pub name: String,
    // The definition is the definition of a view.
    pub definition: String,
    // The comment is the comment of a view.
    pub comment: String,
    // The dependent_columns is the list of dependent columns of a view.
    pub dependent_columns: Vec<DependentColumn>,
}

#[derive(Clone, PartialEq, Debug)]
pub struct FunctionMetadata {
    // The name is the name of a function.
    pub name: String,
    // The definition is the definition of a function.
    pub definition: String,
}

#[derive(Clone, PartialEq, Debug)]
pub struct ProcedureMetadata {
    // The name is the name of a function.
    pub name: String,
    // The definition is the definition of a function.
    pub definition: String,
}

#[derive(Clone, PartialEq, Debug)]
pub struct MaterializedViewMetadata {
    // The name is the name of a materialized view.
    pub name: String,
    // The definition is the definition of a materialized view.
    pub definition: String,
    // The comment is the comment of a materialized view.
    pub comment: String,
    // The dependent_columns is the list of dependent columns of a materialized view.
    pub dependent_columns: Vec<DependentColumn>,
}

#[derive(Clone, PartialEq, Debug)]
pub struct DependentColumn {
    // The schema is the schema of a reference column.
    pub schema: String,
    // The table is the table of a reference column.
    pub table: String,
    // The column is the name of a reference column.
    pub column: String,
}

#[derive(Clone, PartialEq, Debug)]
pub struct TableMetadata {
    // The name is the name of a table.
    pub name: String,
    // The columns is the ordered list of columns in a table.
    pub columns: Vec<ColumnMetadata>,
    // The indexes is the list of indexes in a table.
    pub indexes: Vec<IndexMetadata>,
    // The engine is the engine of a table.
    pub engine: String,
    // The collation is the collation of a table.
    pub collation: Option<String>,
    // The row_count is the estimated number of rows of a table.
    pub row_count: i64,
    // The data_size is the estimated data size of a table.
    pub data_size: i64,
    // The index_size is the estimated index size of a table.
    pub index_size: i64,
    // The data_free is the estimated free data size of a table.
    pub data_free: i64,
    // The create_options is the create option of a table.
    pub create_options: String,
    // The comment is the comment of a table.
    pub comment: String,
    // The foreign_keys is the list of foreign keys in a table.
    pub foreign_keys: Vec<ForeignKeyMetadata>,
    // The owner is the owner of a table.
    pub owner: String,
}

#[derive(Clone, PartialEq, Debug)]
pub struct ColumnMetadata {
    // The name is the name of a column.
    pub name: String,
    // The position is the position in columns.
    pub position: i32,
    // The default_value is the default value of a column.
    pub default: String,
    // The on_update is the on update action of a column.
    // For MySQL like databases, it's only supported for TIMESTAMP columns with CURRENT_TIMESTAMP as on update value.
    pub on_update: Option<String>,
    // The nullable is the nullable of a column.
    pub nullable: bool,
    // The type is the type of a column.
    pub r#type: String,
    // The character_set is the character_set of a column.
    pub character_set: String,
    // The collation is the collation of a column.
    pub collation: String,
    // The comment is the comment of a column.
    pub comment: String,
    // The identity_generation is for identity columns, PG only.
    pub identity_generation: IdentityGeneration,
}

#[derive(Clone, PartialEq, Debug)]
pub enum IdentityGeneration {
    UNSPECIFIED,
    Always,
    ByDefault,
}

#[derive(Clone, PartialEq, Debug)]
pub struct IndexMetadata {
    // The name is the name of an index.
    pub name: String,
    // The expressions are the ordered columns or expressions of an index.
    // This could refer to a column or an expression.
    pub expressions: Vec<String>,
    // The key_lengths are the ordered key lengths of an index.
    // If the key length is not specified, it's -1.
    pub key_length: Vec<i64>,
    // The type is the type of an index.
    pub r#type: String,
    // The unique is whether the index is unique.
    pub unique: bool,
    // The primary is whether the index is a primary key index.
    pub primary: bool,
    // The visible is whether the index is visible.
    pub visible: bool,
    // The comment is the comment of an index.
    pub comment: String,
    // The definition of an index.
    pub definition: String,
}

#[derive(Clone, PartialEq, Debug)]
pub struct ForeignKeyMetadata {
    // The name is the name of a foreign key.
    pub name: String,
    // The columns are the ordered referencing columns of a foreign key.
    pub columns: Vec<String>,
    // The referenced_schema is the referenced schema name of a foreign key.
    // It is an empty string for databases without such concept such as MySQL.
    pub referenced_schema: String,
    // The referenced_table is the referenced table name of a foreign key.
    pub referenced_table: String,
    // The referenced_columns are the ordered referenced columns of a foreign key.
    pub referenced_columns: Vec<String>,
    // The on_delete is the on delete action of a foreign key.
    pub on_delete: String,
    // The on_update is the on update action of a foreign key.
    pub on_update: String,
    // The match_type is the match type of a foreign key.
    // The match_type is the PostgreSQL specific field.
    pub match_type: String,
}
